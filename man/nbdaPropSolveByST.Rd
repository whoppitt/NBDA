% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oadaPropSolveByST.R
\name{nbdaPropSolveByST}
\alias{nbdaPropSolveByST}
\alias{oadaPropSolveByST}
\title{Estimate the proportion of events that occured by social transmission}
\usage{
nbdaPropSolveByST(par = NULL, nbdadata = NULL, model = NULL,
  type = "social", exclude.innovations = T, innovations = NULL)
}
\arguments{
\item{par}{optional numeric giving the parameter values. Not necessary if \code{model} is specified.}

\item{nbdadata}{object of class \code{\link{nbdaData}}, list of objects of class \code{\link{nbdaData}}, object of class
\code{\link{dTADAData}} or list of objects of class \code{\link{dTADAData}}. Not necessary if \code{model} is specified.}

\item{model}{object of class \code{\link{oadaFit}} or \code{\link{tadaFit}}.}

\item{type}{string determining whether the estimates are for an "asocial" or "social" model. This is taken from
\code{model} if provided.}

\item{exclude.innovations}{logical determining whether innovation events (the first individual to learn in each diffusion)
should be excluded from the calculation- since we know the innovation events must occur by asocial learning not social
transmission.}

\item{innovations}{numerical giving the number of innovations across all diffusions. By default this is assumed to be one
innovator per diffusion in which there were no demonstrators (see \code{demons} argument in \code{\link{nbdaData}})}

\item{retainInt}{logical, can be used to force the model to retain int_ilvs in an asocial model. This is used internally
by other functions when there is an offset on the s parameters, but can usually be safely ignored by the user.}
}
\value{
A dataframe giving the predicted proportion of events that occured by social transmission via each network.
}
\description{
Generates a table giving the predicted proportion of events that occured by social transmission (propST or %ST when
expressed as a \%) via each network, as predicted by the fitted model.
}
\details{
The user can provide the name of a model- in which case the MLEs of that model are input as parameter values. Instead the
user can input their own parameter values in which case \code{nbdadata} must also be provided. The function works for
multiple diffusions. A column is also provided for P(S offset), which gives propST for transmission via
network effects that have been allocated to the offset fo s parameters, see \code{\link{constrainedNBDAdata}}.
}
\section{Estimating propST corresponding to the upper and lower endpoints of a C.I. for s (single network)}{

Ideally, one needs to optimize the other parameters in the model while fixing s to its upper and lower limits. This can
be done as follows:
\enumerate{
\item Create a new \code{nbdadata} or \code{dTADAData} object using \code{\link{constrainedNBDAdata}} which has the upper
limit of s set as an offset for s using the \code{offsetVect} argument.
\item Fit an ASOCIAL model to the new constrained data, using \code{\link{oadaFit}} or \code{\link{tadaFit}}.
\item Use \code{nbdaPropSolveByST} to estimate propST, noting that the relevant figure will be contained in the
P(S offset) column.
\item Repeat for the lower limit for s.
}
}

\section{Estimating propST corresponding to the upper and lower endpoints of a C.I. for s (multiple networks)}{

This can be done as follows:
\enumerate{
\item Create a new \code{nbdadata} or \code{dTADAData} object using \code{\link{constrainedNBDAdata}} with the target s
parameter constrained to s=0 using the \code{constraintsVect} argument AND an offset equal to its upper limit using
the \code{offsetVect} argument.
\item Fit a SOCIAL model to the new constrained data, using \code{\link{oadaFit}} or \code{\link{tadaFit}}.
\item Use \code{nbdaPropSolveByST} to estimate propST, noting that the relevant figure will be contained in the
P(S offset) column.
\item Repeat for the lower limit for the target s parameter.
}
}

\seealso{
\code{\link{nbdaPropSolveByST.byevent}}
}
